/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package ihw1

import java.io.File
import kotlin.io.path.Path
import kotlinx.datetime.LocalDateTime
import kotlinx.serialization.Serializable
import kotlinx.serialization.decodeFromString
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

const val FILMS_PATH = "data/films"
const val SESSIONS_PATH = "data/sessions"

var films: MutableMap<String, Film> = mutableMapOf()
var sessions: MutableMap<LocalDateTime, Session> = mutableMapOf()

@Serializable class MutablePair<A, B>(var first: A, var second: B)

@Serializable
class Film(var name: String) {
    var description: String? = null

    override fun toString(): String {
        return "name: $name, description: $description"
    }
}

@Serializable
class Session(var filmName: String) {
    val seats: Array<Array<MutablePair<String?, Boolean>>> =
        Array(10) { Array(10) { MutablePair(null, false) } }

    override fun toString(): String {
        var string = "film: ${films[filmName]}, \nseats:\n  0 1 2 3 4 5 6 7 8 9\n"
        for (i in 0 ..< 10) {
            string += "$i "
            for (j in 0 ..< 10) {
                string +=
                    "${if (seats[i][j].first == null) {"⨯"} else if (!seats[i][j].second) {"✓"} else {"•"}} "
            }
            string += '\n'
        }
        return string
    }

    fun toX(string: String): Int {
        val x = string.toInt()
        if (x < 0 || x > 9) {
            throw Exception("The x index must be from 0 to 9 inclusive.")
        }
        return x
    }

    fun toY(string: String): Int {
        val y = string.toInt()
        if (y < 0 || y > 9) {
            throw Exception("The y index must be from 0 to 9 inclusive.")
        }
        return y
    }
}

fun toDate(string: String): LocalDateTime {
    var date: LocalDateTime?
    try {
        date = LocalDateTime.parse(string)
    } catch (e: Exception) {
        throw Exception("Can't parse the date. Please provide date like 2023-12-01T18:00")
    }
    if (
        date.hour % 2 != 0 ||
            date.hour < 10 ||
            date.hour > 22 ||
            date.minute != 0 ||
            date.second != 0 ||
            date.nanosecond != 0
    ) {
        throw Exception(
            "Slots for a session are only available for even hours from 10:00 to 22:00 inclusive without minutes, seconds, etc."
        )
    }
    return date
}

fun saveFilms() {
    File(Path(FILMS_PATH).parent.toString()).mkdirs()
    File(FILMS_PATH).writeText(Json.encodeToString(films))
}

fun saveSessions() {
    File(Path(SESSIONS_PATH).parent.toString()).mkdirs()
    File(SESSIONS_PATH).writeText(Json.encodeToString(sessions))
}

fun getSession(date: LocalDateTime): Session {
    return sessions[date] ?: throw Exception("The session slot is not assign.")
}

fun getFilm(name: String): Film {
    return films[name] ?: throw Exception("There is no film whith such name.")
}

abstract class Command(args: Array<String>, mustArgsCount: Int) {
    init {
        if (mustArgsCount != args.size) {
            throw Exception(
                "${mustArgsCount - 1} arguments was expected, but ${args.size - 1} was provided"
            )
        }
    }

    abstract fun run()
}

class SellCommand(private val args: Array<String>) : Command(args, 5) {
    private val telephon = args[1]
    private val date = toDate(args[2])
    private val session = getSession(date)
    private val x = session.toX(args[3])
    private val y = session.toY(args[4])

    override fun run() {
        val seat = session.seats[y][x]
        if (seat.first != null) {
            throw Exception("The seat is already sold.")
        }
        seat.first = telephon
        saveSessions()
    }
}

class RevertCommand(private val args: Array<String>) : Command(args, 4) {
    private val date: LocalDateTime = toDate(args[1])
    private val session = getSession(date)
    private val x = session.toX(args[2])
    private val y = session.toY(args[3])

    override fun run() {
        val seat = session.seats[y][x]
        if (seat.second) {
            throw Exception("The seat is occupied.")
        }
        seat.first = null
        saveSessions()
    }
}

class AssignCommand(private val args: Array<String>) : Command(args, 3) {
    private val date: LocalDateTime
        get() {
            val tmpDate = toDate(args[1])
            if (sessions.contains(tmpDate)) {
                throw Exception("The session slot is already assigned.")
            }
            return tmpDate
        }

    private val filmName =
        if (films.contains(args[2])) {
            args[2]
        } else {
            throw Exception("There is no film with such name.")
        }

    override fun run() {
        sessions.put(date, Session(filmName))
        saveSessions()
    }
}

class RemoveSessionCommand(private val args: Array<String>) : Command(args, 3) {
    private val date = toDate(args[2])

    override fun run() {
        sessions.remove(date)
        saveSessions()
    }
}

class RemoveFilmCommand(private val args: Array<String>) : Command(args, 3) {
    private val filmName: String
        get() {
            val tmpFimlName = args[2]
            for (value in sessions.values) {
                if (value.filmName == tmpFimlName) {
                    throw Exception("The film is used in a session.")
                }
            }
            return tmpFimlName
        }

    override fun run() {
        films.remove(filmName)
        saveFilms()
    }
}

class AddCommand(private val args: Array<String>) : Command(args, 2) {
    private val name =
        if (films.contains(args[1])) {
            throw Exception("A film with such name already exists.")
        } else {
            args[1]
        }

    override fun run() {
        films.put(name, Film(name))
        saveFilms()
    }
}

class EditNameCommand(private val args: Array<String>) : Command(args, 4) {
    private val film = getFilm(args[1])
    private val newFilmName = args[3]

    override fun run() {
        for (value in sessions.values) {
            if (value.filmName == film.name) {
                value.filmName = args[3]
            }
        }
        film.name = newFilmName
        films.put(film.name, film)
        films.remove(film.name)
        saveFilms()
        saveSessions()
    }
}

class EditDescriptionCommand(args: Array<String>) : Command(args, 4) {
    private val film = getFilm(args[1])
    private val newDescription = args[3]

    override fun run() {
        film.description = newDescription
        saveFilms()
        saveSessions()
    }
}

class ShowSession(private val args: Array<String>) : Command(args, 3) {
    private val session = getSession(toDate(args[2]))

    override fun run() {
        println("$session")
    }
}

class ShowSessions(private val args: Array<String>) : Command(args, 2) {
    override fun run() {
        sessions.forEach { (key, value) -> println("${key} : ${value.filmName}") }
    }
}

class ShowFilm(private val args: Array<String>) : Command(args, 3) {
    override fun run() {
        println(films[args[2]])
    }
}

class ShowFilms(private val args: Array<String>) : Command(args, 2) {
    override fun run() {
        films.values.forEach { film -> println("$film") }
    }
}

class Occupy(private val args: Array<String>) : Command(args, 4) {
    private val date = toDate(args[1])
    private val session = getSession(date)
    private val x = session.toX(args[2])
    private val y = session.toY(args[3])

    override fun run() {
        if (session.seats[y][x].first == null) {
            throw Exception("The seat is not sold.")
        }
        session.seats[y][x].second = true
        saveSessions()
    }
}

fun main(args: Array<String>) {
    try {
        val elseCommandE = Exception("There is no such command")
        val filmsFile = File(FILMS_PATH)
        films =
            if (filmsFile.exists()) {
                Json.decodeFromString(File(FILMS_PATH).readText(Charsets.UTF_8))
            } else {
                mutableMapOf()
            }
        val sessionsFile = File(SESSIONS_PATH)
        sessions =
            if (sessionsFile.exists()) {
                Json.decodeFromString(sessionsFile.readText(Charsets.UTF_8))
            } else {
                mutableMapOf()
            }
        when (args[0]) {
            "sell" -> SellCommand(args).run()
            "revert" -> RevertCommand(args).run()
            "assign" -> AssignCommand(args).run()
            "remove" ->
                when (args[1]) {
                    "session" -> RemoveSessionCommand(args).run()
                    "film" -> RemoveFilmCommand(args).run()
                    else -> throw elseCommandE
                }
            "add" -> AddCommand(args).run()
            "edit" ->
                when (args[2]) {
                    "name" -> EditNameCommand(args).run()
                    "description" -> EditDescriptionCommand(args).run()
                    else -> throw elseCommandE
                }
            "show" ->
                when (args[1]) {
                    "session" -> ShowSession(args).run()
                    "sessions" -> ShowSessions(args).run()
                    "film" -> ShowFilm(args).run()
                    "films" -> ShowFilms(args).run()
                    else -> throw elseCommandE
                }
            "occupy" -> Occupy(args).run()
            else -> throw elseCommandE
        }
    } catch (e: Exception) {
        System.err.println("Error: ${e.message}")
    }
}
